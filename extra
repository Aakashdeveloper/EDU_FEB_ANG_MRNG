https://nodejs.org/en/
https://github.com/
https://git-scm.com/downloads
https://code.visualstudio.com/


nodejs
Packages
npm js
node Packages manager

Package.json

javascript object notation
[
    {
        name:"a",
        class:"ai"
    },
    {
        name:"b",
        class:"ui"
    }
]


/////
npm init
npm install zone.js


sudo npm install -g @angular/cli

=> To generate new seed
ng new firstapp
cd firstapp
npm start
http://localhost:4200/

//
modules
components
databinding
custome Pipe
inbuilt Pipe
css
////
serach bar
rating
passing data from one component to other
basic Service

//
Service
share module
routing

//
forms
testing

///////
shared component
nesting the component
lifecycle hook
pass data from parent to child with input
pass data from child to parent with output
starting with service





tslint.json=> way of writting code
tsconfig => .ts into .js
readme => guide the user how to run the code
Package.json=> all dependences and start and script and description
Package-lock.json=> all info of Packages
angular.json => path and route
.gitignore=> all code which not suppose to push
.editorconfig => take code similar to the team
node_modules=> all the modules or Packages
src=>





modules=>all decalarations(main=>App.module.ts)   {NgModule}
components=> that containes all the html css logics(main=>App.component.ts){Component}
Pipe=> to do run time data change {Pipe, PipeTransform}
Service=>dependency injection connect to any third part or external url{Injectable}
route=> routing /home /about


tables
alerts
button
glyphicons
panels
navbar
forms
input
modal


git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/Aakashdeveloper/EDU_FEB_ANG_MRNG.git
git push -u origin master


package.json> angular.json=> main.ts=> app.modudle.ts=> app.component.ts


One Way
--data binding {{}}
--property binding []
--Event binding ()
Two Way [()]


string
number 
boolean

var a = "john"
undefined
a
"john"
var b = 8348548
undefined
b
8348548
var c = true
undefined
c
true
var d = "3454"
undefined
typeof(d)
"string"
typeof(c)
"boolean"
typeof(b)
"number"
typeof(a)
"string"
parseInt(d)
3454
var d = "3454.464565"
undefined
parseInt(d)
3454
parseFloat(d)
3454.464565


let fruits = ["apple", "mango", "banana"]
let random = [1,3,"fg","bdf",6,5,67,true,"rgR"]

map & filter in javascript
https://www.w3schools.com/jsref/jsref_filter.asp
https://www.w3schools.com/jsref/jsref_map.asp



http://samplepizzaapi.azurewebsites.net/pizzas
https://ngmovies.herokuapp.com/api/getMovies
https://ngproductsparam.herokuapp.com/api/getProductDetails
https://ngmusicdb.herokuapp.com/api/getMusic


for(i=0; i<10; i++){
    consolr.log(a[i])
}

var a = 10
undefined
a
10
var a = 20
undefined
a
20
let z = 10
undefined
z
10
let z = 11
VM1834:1 Uncaught SyntaxError: Identifier 'z' has already been declared
    at <anonymous>:1:1
(anonymous) @ VM1834:1
z = 11
11
z
11
const y = 20
undefined
y
20
const y = 21
VM1882:1 Uncaught SyntaxError: Identifier 'y' has already been declared
    at <anonymous>:1:1
(anonymous) @ VM1882:1
y=21
VM1891:1 Uncaught TypeError: Assignment to constant variable.
    at <anonymous>:1:2
(anonymous) @ VM1891:1

const u = [1,2,3,4]
undefined
u
(4) [1, 2, 3, 4]
u.push(5)
5
u
(5) [1, 2, 3, 4, 5]


*ngFor
*ngIf this work on boolean
if true it will show the tag else not


products && products.length
if(a==true){

}

if(a){

}


name="andy"
{
    name:name
}
{
    name
}

/////////
css inside ts file 
css as stylesheet 
inline css(css in tag)
dynamic css(property binding)
conditional css



////////Pipe(filter)//////
uppercase
lowercase
titlecase
currency
date
percentage





//////////////////////
function add(a,b){
    return a+b
}

const add = (a,b) => { return a+b }
var city = ["london", "newyork", "davos", "mumbai", "delhi"]
city.indexOf("london")
0
var city = ["london", "newyork", "davos", "mumbai", "delhi"]
city.indexOf("mumbai")
3
var city = ["london", "newyork", "davos", "mumbai", "delhi"]
city.indexOf("amsterdam")
-1
var city = ["london", "newyork", "davos", "mumbai", "delhi"]
city.indexOf("helsinki")
-1


///////
dependency injection

when the object recive a property from extranl object rather than
creating itself


Observables
Streams so far are just a concept, an idea.

We link streams together using operators, so in in our previous example the add function is an operation, specifically it’s an operation which combines two streams to create a third.

Observables is a new primitive type which acts as a blueprint for how we want to create streams, subscribe to them, react to new values, and combine streams together to build new ones.

It’s currently in discussion whether or not Observables make it into the ES7 version of JavaScript.

We are still trying to roll out ES6 so even if it makes it, it will be many years before ES7 becomes something we can code with natively.

Until then we need to use a library that gives us the Observable primitive and that’s where RxJS comes in.

RxJS
RxJS stands for *R*eactive E*x*tensions for *J*ava*S*cript, and its a library that gives us an implementation of Observables for JavaScript.

Note
Observables might become a core part of the JavaScript language in the future, so we can think of RxJS as a placeholder for when that arrives.
RxJS is the JavaScript implementation of the ReactiveX API, which can be found here.

////

JSOn Server

npm install -g json-Server
json-server --watch db.json --port 8900


Template Driven Approch html>ts
Reactive Driven ts>html
npm install bootstrap@3

ng-dirty      ng-touched        ng-invalid
ng-pristine   ng-untouched      ng-valid

/////////////
cli
ng generate component employee
ng g c employee
ng g s postemployee
ng g p filter
ng g m product


          <!--
                  <div class="form-group" [ngClass]="{'has-error':(employeeForm.get('email').touched ||
                                                                employeeForm.get('email').dirty) &&
                                                                !employeeForm.get('email').valid}">
                    <label class="col-md-2 control-label" for="email">Email</label>
                    <div class="col-md-8">
                        <input class="form-control" 
                        id="email"
                        type="text"
                        placeholder="enter your email"
                        formControlName="email"/>
                        <span class="help-block" *ngIf="(employeeForm.get('email').touched ||
                                                        (employeeForm.get('email').dirty) &&
                                                        (employeeForm.get('email').errors))">
                              <span *ngIf="employeeForm.get('email').errors.required">
                              Please enter email
                              </span>
                              <span *ngIf="employeeForm.get('email').errors.pattern">
                              Enter valid email
                              </span>
                        </span>
                    </div>
                </div>
          -->